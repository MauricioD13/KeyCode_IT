response = Map();
actionType = action.get("type");
if("button".equals(actionType))
{
	buttonName = action.get("name");
	if("booking".equals(buttonName))
	{
		// Form for book an appointment
		response.put("type","form");
		response.put("title","Agendar reunion");
		response.put("name","form_booking");
		response.put("action",{"type":"invoke.function","name":"appointmentSchedule"});
		response.put("hint","Agendar reunion");
		response.put("button_label","Submit");
		response.put("trigger_on_cancel",true);
		inputs = Collection();
		emailField = {"type":"email","name":"email","label":"Email del cliente","placeholder":"email","value":"ejemplo@gmail.com","max_length":100,"min_length":10};
		phoneField = {"type":"text","name":"phone","label":"Enter Customer phone here","placeholder":"phone here","value":context.get("data").get("phone"),"mandatory":true,"max_length":100,"min_length":10};
		// IDs from Zoho Bookings are hardcore, hence it must be updated when people change
		operatorField = {"type":"select","name":"operator","label":"TÃ©cnico","placeholder":"Tecnico que agenda la reunion","mandatory":true,"options":{{"label":"Wagner","value":"194764000000027006"},{"label":"Luis","value":"194764000000200014"},{"label":"Tales","value":"194764000000026008"}}};
		//Fetch services available
		response_consultations = invokeurl
		[
			url :"https://zohoapis.eu/bookings/v1/json/services?workspace_id=194764000000026010"
			type :GET
			connection:"salesiqbookings"
		];
		consultations = response_consultations.get("response").get("returnvalue").get("data");
		data_options = {};
		// Order the consultations
		for each  consultation in consultations
		{
			aux = {"label":consultation.get("name"),"value":consultation.get("id")};
			data_options.add(aux);
		}
		consultationField = {"type":"select","name":"consultation","label":"Tipo de consulta","placeholder":"Tipo de consulta","mandatory":true,"options":data_options,"trigger_on_change":true};
		customerField = {"type":"text","name":"customer_name","label":"Nombre del cliente","placeholder":"Nombre del cliente","mandatory":true,"value":context.get("data").get("name"),"max_length":100,"min_length":5};
		slotSelectField = {"type":"select","name":"time_slot","label":"Horarios disponibles","placeholder":"Horario disponible","mandatory":true,"options":{{"label":"-","value":"-"}}};
		inputs.add(customerField);
		inputs.add(emailField);
		inputs.add(phoneField);
		inputs.add(operatorField);
		inputs.add(consultationField);
		inputs.add(slotSelectField);
		response.put("inputs",inputs);
		return response;
	}
	else if("share_appointment".equals(buttonName))
	{
		// Prospect feature
		response = {"type":"post_message","message":"Test"};
	}
	else if("cancel".equals(buttonName))
	{
		response.put("type","banner");
		response.put("status","success");
		return response;
	}
	else
	{
		response.put("type","banner");
		response.put("status","failed");
		response.put("text","Algo va mal");
		return response;
	}
}
return response;